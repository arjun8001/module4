package com.test;

without injection

public class Triangle {

	
	public void draw()
	{
		System.out.println("Triangle draw");
	}
}






package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
		Triangle obj= (Triangle)ctx.getBean("triangle");
		obj.draw();
	}
	
}









<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle">
</bean>
	 
</beans>

-------------------------------------------------------------------------------------------------------------------------
injection




package com.test;

public class Triangle {
	 
	private  String triangleName;
	
	

	


	public String getTriangleName() {
		return triangleName;
	}






	public void setTriangleName(String triangleName) {
		this.triangleName = triangleName;
	}






	public void draw()
	{
		System.out.println("Triangle draw"+
				triangleName);
	}
}









package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
		Triangle obj= (Triangle)ctx.getBean("triangle");
		
		obj.draw();
	}
	
}





<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle">
<property name="triangleName" value="Equilateral" /> 
</bean>
	 
</beans>
----------------------------------------------------------------------------------------------------------------------------------
verify whether singleton


package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		Triangle obj2= (Triangle)ctx.getBean("triangle");
		
		obj2.draw();
		
		if(obj1==obj2)
				{
			System.out.println("singleton");
				}else{
					System.out.println("prototype");
				}
	}
	
}

-----------------------------------------------------------------------------------------------------------------------------------
setter injection




package com.test;

public class Triangle {
	 
	private int sides;
	private  String triangleName;
	
	

	


	public int getSides() {
		return sides;
	}






	public void setSides(int sides) {
		this.sides = sides;
	}






	public String getTriangleName() {
		return triangleName;
	}






	public void setTriangleName(String triangleName) {
		this.triangleName = triangleName;
	}






	public void draw()
	{
		System.out.println("Triangle draw"+
				triangleName+"sides"+sides);
	}
}











package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		
		
	}
	
}













<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" >
<property name="triangleName" value="rightAngled" /> 
<property name="sides" value="3"/>
</bean>
	 
</beans>
-------------------------------------------------------------------------------------------
constructor injection(follow order)



<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" >
<property name="triangleName" value="rightAngled" /> 
<property name="sides" value="3"/>
</bean>
	 <bean id="triangle1" class="com.test.Triangle"
	 <constructor-arg value="4" />
	 <constructor-arg value="equi"/>
	 </bean>
</beans>










package com.test;

public class Triangle {
	 
	private int sides;
	private  String triangleName;
	
	public int getSides() {
		return sides;
	}

	public void setSides(int sides) {
		this.sides = sides;
	}

	public String getTriangleName() {
		return triangleName;
	}

	public void setTriangleName(String triangleName) {
		this.triangleName = triangleName;
	}






	public Triangle(int sides, String triangleName) {
		super();
		this.sides = sides;
		this.triangleName = triangleName;
	}






	public Triangle() {
		super();
	}






	public void draw()
	{
		System.out.println("Triangle draw"+" "+
				triangleName+" "+"sides"+" "+sides);
	}
}
===================================================
index

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" >
<property name="triangleName" value="rightAngled" /> 
<property name="sides" value="3"/>
</bean>
	 <bean id="triangle1" class="com.test.Triangle"
	 <constructor-arg index="0" value="4" />
	 <constructor-arg index="1" value="equi"/>
	 </bean>
</beans>
--------------------------------------------------
type


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" >
<property name="triangleName" value="rightAngled" /> 
<property name="sides" value="3"/>
</bean>
	 <bean id="triangle1" class="com.test.Triangle"
	 <constructor-arg type="int" value="4" />
	 <constructor-arg type="String" value="equi"/>
	 </bean>
</beans>
=====================================================================================================
init and destroy



package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring1.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		
		
	}
	
}












package com.test;

import javax.security.auth.Destroyable;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class Triangle implements InitializingBean,DisposableBean {
	
	
	public void draw()
	{
		System.out.println("Triangle draw");
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("Init method called");
		
	}

	@Override
	public void destroy() throws Exception {
		System.out.println("Destroy");
		
	}
}











<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" >

</bean>
</beans>
------------------------------------------------------------------------
another way


package com.test;




public class Triangle  {
	
	
	public void draw()
	{
		System.out.println("Triangle draw");
	}

	
	public void init() {
		System.out.println("Init method called");
		
	}

	
	public void destroy() {
		System.out.println("Destroy");
		
	}
}










package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring1.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		
		
	}
	
}







(Custom methods)







<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
<bean id="triangle" class="com.test.Triangle" init-method="init" destroy-method="destroy">

</bean>
</beans>
----------------------------------------------------------------------
once mention(but every bean has to use same names for init and destroy)



<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd" default-init-method="init"  default-destroy-method="destroy">
	
<bean id="triangle" class="com.test.Triangle" >

</bean>
</beans>
--------------------------------------------------------------------------------

Third method is using annotation
-----------------------------------------------------------------------------

BPP





package com.test;




public class Triangle  {
	
	
	public void draw()
	{
		System.out.println("Triangle draw");
	}

	
	public void init() {
		System.out.println("Init method called");
		
	}

	
	public void destroy() {
		System.out.println("Destroy");
		
	}
}










package com.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring1.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		
		
	}
	
}












package com.test;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class BPP implements BeanPostProcessor {

	@Override
	public Object postProcessAfterInitialization(Object obj, String name)
			throws BeansException {
		System.out.println("BPP AFTER INIT CALLED");
		return obj;
	}

	@Override
	public Object postProcessBeforeInitialization(Object obj, String name)
			throws BeansException {
		System.out.println("BPP BEFORE INIT CALLED");
		return obj;
	}

}



<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd" default-init-method="init"  default-destroy-method="destroy">
	
<bean id="triangle" class="com.test.Triangle" >

</bean>
<bean class="com.test.BPP">
</bean>
</beans>
-------------------------------------------------------------------------------------------------------
BFPP
(add to above codes)



package com.test;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

public class BFPP implements BeanFactoryPostProcessor{

	@Override
	public void postProcessBeanFactory(ConfigurableListableBeanFactory arg0)
			throws BeansException {
	System.out.println("BFPP METHOD CALLED");
		
	}

}



package com.test;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

public class BFPP implements BeanFactoryPostProcessor{

	@Override
	public void postProcessBeanFactory(ConfigurableListableBeanFactory arg0)
			throws BeansException {
	System.out.println("BFPP METHOD CALLED");
		
	}

}

------------------------------------------------------------------------------------------------------------
to pass bean name

package com.test;

import org.springframework.beans.factory.BeanNameAware;




public class Triangle implements BeanNameAware {
	
	
	public void draw()
	{
		System.out.println("Triangle draw");
	}

	
	public void init() {
		System.out.println("Init method called");
		
	}

	
	public void destroy() {
		System.out.println("Destroy");
		
	}


	@Override
	public void setBeanName(String arg0) {
		System.out.println("Bean name aware name="+arg0); // to pass bean name
		
	}
}



*****************Order of life cycle of bean
BFPP METHOD CALLED
Bean name aware name=triangle
BPP BEFORE INIT CALLED
Init method called
BPP AFTER INIT CALLED
Triangle draw
Destroy
------------------------------------------------------------------
injecting class (setter injection)


package com.test;

public class Triangle 
{
 private Point point;
 
	public Point getPoint() {
	return point;
}
	
public void setPoint(Point point) {
	this.point = point;
}

public void draw()
	{
		System.out.println("Triangle draw" +point.getX());
	}

	
}




<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle">
	<property name="point" ref="point"/>
</bean>

<bean id="point"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>
</beans>




package com.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring2.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		/*
		Triangle t=new Triangle();
		Point p=new Point();
		p.setX(10);
		p.setY(20);
		t.draw();
	}*/
	
}
}



package com.test;

public class Point {
		private int x;
		private int y;
		public int getX() {
			return x;
		}
		public void setX(int x) {
			this.x = x;
		}
		public int getY() {
			return y;
		}
		public void setY(int y) {
			this.y = y;
		}
}
-----------------------------------------------------------------
more than 1(setter injection)



package com.test;

public class Triangle 
{
 private Point point1;
 private Point point2;
 private Point point3;
 
public Point getPoint1() {
	return point1;
}

public void setPoint1(Point point1) {
	this.point1 = point1;
}

public Point getPoint2() {
	return point2;
}

public void setPoint2(Point point2) {
	this.point2 = point2;
}

public Point getPoint3() {
	return point3;
}

public void setPoint3(Point point3) {
	this.point3 = point3;
}

public void draw()
	{
		System.out.println("Triangle draw" +point1.getX()+" "+point1.getY());
		System.out.println("Triangle draw" +point2.getX()+" "+point2.getY());
		System.out.println("Triangle draw" +point3.getX()+" "+point3.getY());
	}
}





<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle">
	<property name="point1" ref="point1"/>
	<property name="point2" ref="point2"/>
	<property name="point3" ref="point3"/>
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>
<bean id="point2"  class="com.test.Point">
	<property name="x" value="30" />
	<property name="y" value="40" />
</bean>
<bean id="point3"  class="com.test.Point">
	<property name="x" value="50" />
	<property name="y" value="60" />
</bean>
</beans>






package com.test;

public class Point {
		private int x;
		private int y;
		public int getX() {
			return x;
		}
		public void setX(int x) {
			this.x = x;
		}
		public int getY() {
			return y;
		}
		public void setY(int y) {
			this.y = y;
		}
}









package com.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring2.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		/*
		Triangle t=new Triangle();
		Point p=new Point();
		p.setX(10);
		p.setY(20);
		t.draw();
	}*/
	
}
}
-------------------------------------------------------------------------
setter injection




<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle">
	<constructor-arg ref="point1"/>
	<constructor-arg ref="point2"/>
	<constructor-arg ref="point3"/>
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>
<bean id="point2"  class="com.test.Point">
	<property name="x" value="30" />
	<property name="y" value="40" />
</bean>
<bean id="point3"  class="com.test.Point">
	<property name="x" value="50" />
	<property name="y" value="60" />
</bean>
</beans>
-------------------------------------------------------------------------------
autowire by name(if property name matches with bean id name)


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle" autowire="byName" >
	
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>
<bean id="point2"  class="com.test.Point">
	<property name="x" value="30" />
	<property name="y" value="40" />
</bean>
<bean id="point3"  class="com.test.Point">
	<property name="x" value="50" />
	<property name="y" value="60" />
</bean>
</beans>
------------------------------------------------------------------------------
ByType will work only when there are diff datatypes
-------------------------------------------------------------------------------
by constructor


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle" autowire="constructor" >
	
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>

</beans>
---------------------------------------------------------------------------
bytype




<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle" autowire="byType" >
	
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>

</beans>
----------------------------------------- --------------------------------------------
inject collection







package com.test;

import java.util.List;

public class Triangle 
{
 private List<Point> points;


public List<Point> getPoints() {
	return points;
}


public void setPoints(List<Point> points) {
	this.points = points;
}


public void draw()
	{
		System.out.println("Triangle draw");
		for(Point p: points)
		{
			System.out.println(p.getX()+" "+p.getY());
		}
	}
}









<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<bean id="triangle" class="com.test.Triangle" >
	<property name="points">
	<list> 
		<ref bean="point1"/>
		<ref bean="point2"/>
		<ref bean="point3"/>
	</list>
	</property>
</bean>

<bean id="point1"  class="com.test.Point">
	<property name="x" value="10" />
	<property name="y" value="20" />
</bean>
<bean id="point2"  class="com.test.Point">
	<property name="x" value="30" />
	<property name="y" value="40" />
</bean>
<bean id="point3"  class="com.test.Point">
	<property name="x" value="50" />
	<property name="y" value="60" />
</bean>

</beans>






package com.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring2.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		/*
		Triangle t=new Triangle();
		Point p=new Point();
		p.setX(10);
		p.setY(20);
		t.draw();
	}*/
	
}
}
---------------------------------------------------------------------------------------------
11/12
----------------------------------------------------------------------------------------------
annotation(init and desroy)


package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;



public class Triangle 
{

@PostConstruct
public void init()
{
	
System.out.println("init called");
}

@PreDestroy
public void draw()
	{
		System.out.println("Triangle draw");
		

	
	}

public void destroy()
{
	System.out.println("destroy called");
}
}

-------------------------------------------------------------
@component



package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.stereotype.Component;


@Component
public class Triangle 
{

@PostConstruct
public void init()
{
	
System.out.println("init called");
}

@PreDestroy
public void draw()
	{
		System.out.println("Triangle draw");
		

	
	}

public void destroy()
{
	System.out.println("destroy called");
}
}






<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<context:component-scan base-package="com.test"/>
</beans>
-------------------------------------------------------------------------------------------------------------------------------
<context:annotation-config/> can be enabled by component scan ..., but vice-versa is not true
-=-------------------------------------------------------------------------------------------------------------------------------
naming component




package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.stereotype.Component;


@Component("triangle1")
public class Triangle 
{

@PostConstruct
public void init()
{
	
System.out.println("init called");
}

@PreDestroy
public void draw()
	{
		System.out.println("Triangle draw");
		

	
	}

public void destroy()
{
	System.out.println("destroy called");
}
}








<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">

<context:component-scan base-package="com.test"/>
</beans>




package com.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring3.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle1");
		
		obj1.draw();
		
		ctx.close();
		/*
		Triangle t=new Triangle();
		Point p=new Point();
		p.setX(10);
		p.setY(20);
		t.draw();
	}*/
	
}
}
------------------------------------------------------------------------------------------------------------

package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


@Component
public class Triangle 
{
      @Value("Equilateral")
	private String triangleName;
	
	
	
@PostConstruct
public void init()
{
	
System.out.println("init called");
}

@PreDestroy
public void draw()
	{
		System.out.println("Triangle draw"+triangleName);
		

	
	}

public void destroy()
{
	System.out.println("destroy called");
}
}







<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">
<context:annotation-config/>
<bean id="triangle" class="com.test.Triangle"></bean>
</beans>








package com.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestApp {

	public static void main(String[] args){
		
		ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring3.xml");
		Triangle obj1= (Triangle)ctx.getBean("triangle");
		
		obj1.draw();
		
		ctx.close();
		
	
}
}
-------------------------------------------------------------------------------------------------------------------------
point byname



package com.test;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


@Component
public class Point {
	
		@Value("10")
		private int x;
		
		@Value("20")
		private int y;
		public int getX() {
			return x;
		}
		public void setX(int x) {
			this.x = x;
		}
		public int getY() {
			return y;
		}
		public void setY(int y) {
			this.y = y;
		}
}








package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


@Component
public class Triangle 
{
      @Value("Equilateral")
	private String triangleName;
	
      
    @Autowired
	private Point point;
	
	
public String getTriangleName() {
		return triangleName;
	}

	public void setTriangleName(String triangleName) {
		this.triangleName = triangleName;
	}

	public Point getPoint() {
		return point;
	}

	public void setPoint(Point point) {
		this.point = point;
	}

@PostConstruct
public void init()
{
	
System.out.println("init called");
}


public void draw()
	{
		System.out.println("Triangle draw"+triangleName);
		System.out.println(point.getX()+" "+point.getY());
	}

@PreDestroy
public void destroy()
{
	System.out.println("destroy called");
}
}






-------------------------------------------------------------------------------------
setter injection



package com.test;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


@Component
public class Triangle 
{
      @Value("Equilateral")
	private String triangleName;
	
      

	private Point point;
	
	
public String getTriangleName() {
		return triangleName;
	}

	public void setTriangleName(String triangleName) {
		this.triangleName = triangleName;
	}

	public Point getPoint() {
		return point;
	}
	
	@Autowired
	public void setPoint(Point point) {
		this.point = point;
	}

@PostConstruct
public void init()
{
	
System.out.println("init called");
}


public void draw()
	{
		System.out.println("Triangle draw"+triangleName);
		System.out.println(point.getX()+" "+point.getY());
	}

@PreDestroy
public void destroy()
{
	System.out.println("destroy called");
}
}





----------------------------------------------------------------------------
if autowired is used on constructor .., then called constructor injection
----------------------------------------------------------------------------




