Persist





package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp= new Employee();
	emp.setEmployeeName("John");
	emp.setEmployeeSalary(60000);
	
	em.persist(emp);
	
	em.getTransaction().commit();
	System.out.println("Employee added to database");
	em.close();
	emf.close();
	}

}
---------------------------------------------------------------------------------------------------------

Find

package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,4);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		System.out.println(emp.getEmployeeName()+" "+emp.getEmployeeId());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------
will persist


package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,4);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		emp.setEmployeeSalary(5000);
		System.out.println(emp.getEmployeeName()+" "+emp.getEmployeeId());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------
object detach

package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,4);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		em.detach(emp);
		emp.setEmployeeSalary(15000);
		System.out.println(emp.getEmployeeName()+" "+emp.getEmployeeId());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------

all entities detach


package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,4);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		em.clear();
		emp.setEmployeeSalary(15000);
		System.out.println(emp.getEmployeeName()+" "+emp.getEmployeeId());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------

find and remove

package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,4);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		em.remove(emp);
		System.out.println("Employee removed successfully");
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------
find and change the name

package com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	Employee emp=em.find(Employee.class,2);
	if(emp==null){
		System.out.println("Employee not found");
	}
	else
	{
		emp.setEmployeeName("Shyam");
		em.merge(emp);
		System.out.println("Employee name updated successfully");
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------

to get all records in the table(general query)(type casting)

package com.cg.jpastart.entities;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	Query qry = em.createQuery("from Employee");
	List list = qry.getResultList();
	for(Object obj : list){
		Employee emp = (Employee) obj; //type casting
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------

to get all records in the table(Typequery)(no type casting)


package com.cg.jpastart.entities;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	TypedQuery<Employee> qry=em.createQuery("from Employee", Employee.class);
	List<Employee> list = qry.getResultList();	
	
	for(Employee emp : list){
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}
---------------------------------------------------------------------------------------------------------

to get a particular row


package com.cg.jpastart.entities;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	TypedQuery<Employee> qry=em.createQuery("from Employee where employeeId=3", Employee.class);
	List<Employee> list = qry.getResultList();	
	
	for(Employee emp : list){
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}
---------------------------------------------------------------------------------------------------------

without using list retriving single row

package com.cg.jpastart.entities;



import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	TypedQuery<Employee> qry=em.createQuery("from Employee where employeeId=3", Employee.class);
	Employee emp=qry.getSingleResult();	
	
	
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------
without hardcoding

package com.cg.jpastart.entities;



import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	TypedQuery<Employee> qry=em.createQuery("from Employee where employeeId=?", Employee.class);
	qry.setParameter(1,2);
	Employee emp=qry.getSingleResult();	
	
	
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}
---------------------------------------------------------------------------------------------------------

*********Named parameter


package com.cg.jpastart.entities;



import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	
	TypedQuery<Employee> qry=em.createQuery("from Employee where employeeId=:id", Employee.class);
	qry.setParameter("id",2);
	Employee emp=qry.getSingleResult();	
	
	
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------

another way of giving query


package com.cg.jpastart.entities;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

@Entity
@Table(name="employee_tbl")
@NamedQuery(name="viewAllEmployee",query="from Employee")
public class Employee {
     
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=15)
	private String employeeName;
	
	@Column(name="emp_salary")
	private int employeeSalary;
	
	
	
	
	public int getEmployeeId() {
		return employeeId;
	}
	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}
	public String getEmployeeName() {
		return employeeName;
	}
	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}
	public int getEmployeeSalary() {
		return employeeSalary;
	}
	public void setEmployeeSalary(int employeeSalary) {
		this.employeeSalary = employeeSalary;
	}
	
	public Employee(int employeeId, String employeeName, int employeeSalary) {
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}
	
	public Employee() {
		super();
	}
	
	
}

package com.cg.jpastart.entities;



import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	TypedQuery<Employee> qry=em.createNamedQuery("viewAllEmployee", Employee.class);
	
	List<Employee> list=qry.getResultList();
	for(Employee emp: list){
	
	
		System.out.println(emp.getEmployeeId()+" "+emp.getEmployeeName()+" "+emp.getEmployeeSalary());
	}
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}

---------------------------------------------------------------------------------------------------------
If any particular value shld nt be persisted

package com.cg.jpastart.entities;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;

@Entity
@Table(name="employee_tbl")
@NamedQuery(name="viewAllEmployee",query="from Employee")
public class Employee {
     
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=15)
	private String employeeName;
	
	@Column(name="emp_salary")
	@Transient
	private int employeeSalary;
	
	
	
	
	public int getEmployeeId() {
		return employeeId;
	}
	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}
	public String getEmployeeName() {
		return employeeName;
	}
	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}
	public int getEmployeeSalary() {
		return employeeSalary;
	}
	public void setEmployeeSalary(int employeeSalary) {
		this.employeeSalary = employeeSalary;
	}
	
	public Employee(int employeeId, String employeeName, int employeeSalary) {
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}
	
	public Employee() {
		super();
	}
	
	
}



package com.cg.jpastart.entities;



import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class EmployeeTest {
	
	public static void main(String[] args) {
	EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
	EntityManager em=emf.createEntityManager();
	em.getTransaction().begin();
	
	Employee emp= new Employee();
	emp.setEmployeeName("Vijay");
	emp.setEmployeeSalary(90000);
	em.persist(emp);
	em.getTransaction().commit();
	em.close();
	emf.close();
	}

}
------------------------------------------------------------------------------
persisting both tables(joins)




package com.test;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="emp_tbl")
public class Employee {
	
	@Id
	@GeneratedValue
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=10)
	private String employeeName;
	
	@OneToOne
	@JoinColumn(name="dept_id")
	private Department department;

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
	
}





package com.test;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="emp_tbl")
public class Employee {
	
	@Id
	@GeneratedValue
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=10)
	private String employeeName;
	
	@OneToOne
	@JoinColumn(name="dept_id")
	private Department department;

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
	
}


package com.test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class TestMapping {

	public static void main(String[] args) {
		
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em=emf.createEntityManager();
		em.getTransaction().begin();

		Employee emp= new Employee();
		emp.setEmployeeName("John");

		Department dept= new Department();
		dept.setDepartmentName("Sales");
		
		emp.setDepartment(dept);
		em.persist(emp);
		em.persist(dept);
	
		
		em.getTransaction().commit();
           System.out.println("Employee Added");
           em.close();
           emf.close();
	}

}


---------------------------------------------------------
persisting both tables using cascade



package com.test;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="emp_tbl")
public class Employee {
	
	@Id
	@GeneratedValue
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=10)
	private String employeeName;
	
	@OneToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="dept_id")
	private Department department;

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
	
}




package com.test;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;0


@Entity
@Table(name="dept_tbl")
public class Department {
	
	@Id
	@GeneratedValue
	@Column(name="dept_id")
	private int departmentId;
	
	@Column(name="dept_name",length=10)
	private String departmentName;

	public int getDepartmentId() {
		return departmentId;
	}

	public void setDepartmentId(int departmentId) {
		this.departmentId = departmentId;
	}

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}
	

}



package com.test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class TestMapping {

	public static void main(String[] args) {
		
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em=emf.createEntityManager();
		em.getTransaction().begin();
		Employee emp= new Employee();
		emp.setEmployeeName("seema");
		Department dept= new Department();
		dept.setDepartmentName("Finance");
		
		emp.setDepartment(dept);
		
		
		em.persist(emp);
	
	
		
		em.getTransaction().commit();
           System.out.println("Employee Added");
           em.close();
           emf.close();
	}

}
----------------------------------------------------------------------------------------

find in both tables(*dont create new obj for child)

package com.test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class TestMapping {

	public static void main(String[] args) {
		
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em=emf.createEntityManager();
		em.getTransaction().begin();
		
		Employee emp= em.find(Employee.class, 1);
		System.out.println(emp.getEmployeeName());
		System.out.println(emp.getDepartment().getDepartmentName());
		
		em.getTransaction().commit();
          
           em.close();
           emf.close();
	}

}
----------------------------------------------------------------------------------------
remove both


package com.test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class TestMapping {

	public static void main(String[] args) {
		
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em=emf.createEntityManager();
		em.getTransaction().begin();
		
		Employee emp= em.find(Employee.class, 1);
		em.remove(emp);
		
		em.getTransaction().commit();
          System.out.println("Employee removed");
           em.close();
           emf.close();
	}

}
----------------------------------------------
to  make eager to lazy



package com.test;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="emp_tbl")
public class Employee {
	
	@Id
	@GeneratedValue
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=10)
	private String employeeName;
	
	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.LAZY)
	@JoinColumn(name="dept_id")
	private Department department;

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
	
}
-------------------------------------------------------------------
bidirectional mapping



package com.test;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="emp_tbl")
public class Employee {
	
	@Id
	@GeneratedValue
	@Column(name="emp_id")
	private int employeeId;
	
	@Column(name="emp_name",length=10)
	private String employeeName;
	
	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.LAZY)
	@JoinColumn(name="dept_id")
	
	private Department department;

	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	
	
}




package com.test;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;


@Entity
@Table(name="dept_tbl")
public class Department {
	
	@Id
	@GeneratedValue
	@Column(name="dept_id")
	private int departmentId;
	
	@Column(name="dept_name",length=10)
	private String departmentName;
	
	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@OneToOne(mappedBy="department")
	private Employee employee;

	public int getDepartmentId() {
		return departmentId;
	}

	public void setDepartmentId(int departmentId) {
		this.departmentId = departmentId;
	}

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}
	

}




package com.test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class TestMapping {

	public static void main(String[] args) {
		
		
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em=emf.createEntityManager();
		em.getTransaction().begin();
		Department dept= em.find(Department.class, 6);
		
		System.out.println(dept.getEmployee().getEmployeeName());
		
		em.getTransaction().commit();
          System.out.println("Employee removed");
           em.close();
           emf.close();
	}

}
-----------------------------------------------------------------------------------------------p

One to many



ackage com.cg.jpastart.entities;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Client1 {
public static void main(String[] args) {
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em = factory.createEntityManager();
		em.getTransaction().begin();
		
		
		Department d1=new Department();
		d1.setId(11);
		d1.setName("Finance");
		
		Employee e1=new Employee();
		e1.setId(1003);
		e1.setName("Jhon");
		e1.setSalary(80000);
		
		
		Employee e2=new Employee();
		e2.setId(1004);
		e2.setName("David");
		e2.setSalary(90000);
		
		d1.addEmployee(e1);
		d1.addEmployee(e2);
		
		em.persist(d1);
		
		em.getTransaction().commit();
		
		System.out.println("Added successfully!!!!!");
		em.close();
		factory.close();
		
}
}

------------------------------------------------------------------------------------------------
to get list in one to many



package com.cg.jpastart.entities;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

public class Client1 {
public static void main(String[] args) {
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("JPA-PU");
		EntityManager em = factory.createEntityManager();
		em.getTransaction().begin();
		
		
		String qryStr="from Employee where department.id=10 ";
		TypedQuery<Employee> query=em.createQuery(qryStr,Employee.class);
		List<Employee> list = query.getResultList();
		
		for(Employee emp : list)
		{
			System.out.println(emp.getName()+" "+ emp.getSalary());
		}
		em.getTransaction().commit();
		em.close();
		factory.close();
		
}
}

---------------------------------------------------------------------------------------------------------



